#!/bin/bash
# ------------------------------------------------------------------------------ 
### BEGIN INIT INFO
# Provides:          poker-terminator
# Required-Start:    $remote_fs $named $syslog
# Required-Stop:     $remote_fs $named $syslog
# Should-Start:      memcached mysql
# Should-Stop:       memcached mysql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: DEBIAN initscript poker-terminator
# Description:       this script is used to control the poker-terminator startup
#                    place this file in /etc/init.d.
### END INIT INFO

# Author: Andor Goetzendorff <andor@anata-it.de>
#
# ______________________________________________________________________________ 
#
# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin # modify if you need

DAEMON_BASEPATH="/usr/lib/poker-terminator"
FOREVER="${DAEMON_BASEPATH}/node_modules/.bin/forever"
APP_SCRIPT_NAME="server.coffee"

DESC="poker-terminator"

NODEUSER=poker-terminator:poker-terminator  # USER who OWNS the daemon process (no matter whoever runs the init script)
                                            # user:group (if no group is specified, the primary GID for that user is used)

LOCAL_VAR_RUN=/var/run
NAME=node                                   # name of the node.js executable
DAEMON=$(which $NAME)                       # this SHOULD POINT TO where your node executable is

# Do NOT "set -e"

[ $UID -eq "0" ] && LOCAL_VAR_RUN=/var/run # in case this script is run by root, override user setting
THIS_ARG=$0
INIT_SCRIPT_NAME=`basename $THIS_ARG`
[ -h $THIS_ARG ] && INIT_SCRIPT_NAME=`basename $(readlink $THIS_ARG)` # in case of symlink
INIT_SCRIPT_NAME_NOEXT=${INIT_SCRIPT_NAME%.*}                            
PIDFILE="$LOCAL_VAR_RUN/$INIT_SCRIPT_NAME_NOEXT.pid"
SCRIPTNAME=/etc/init.d/$INIT_SCRIPT_NAME


# Exit if the package is not installed
[ -x "$DAEMON" ] ||  { echo "can't find Node.js ($DAEMON)"  >&2; exit 0; }

# Exit if the 'run' folder is not present
[ -d "$LOCAL_VAR_RUN" ] || { echo "Directory $LOCAL_VAR_RUN does not exist. Modify the '$INIT_SCRIPT_NAME_NOEXT' init.d script ($THIS_ARG) accordingly" >&2; exit 0; }

# Read configuration variable file if it is present
[ -r /etc/default/$INIT_SCRIPT_NAME ] && . /etc/default/$INIT_SCRIPT_NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# uncomment to override system setting
VERBOSE=yes

# enable more nofile
ulimit -n 10240
#
# Function that starts the daemon/service
#
do_start() {
	su poker-terminator -c "$FOREVER list" | grep ${APP_SCRIPT_NAME} &>/dev/null \
		&& { [ "$VERBOSE" != no ] && log_daemon_msg  "  ---> Daemon already running"; return 1; }
	
	touch /var/run/poker-terminator.pid && chown poker-terminator:poker-terminator /var/run/poker-terminator.pid
	
	start-stop-daemon --start --background --chuid $NODEUSER --pidfile $PIDFILE --exec $DAEMON_BASEPATH/start_server -- SYSLOG 1 \
		|| { [ "$VERBOSE" != no ] && log_daemon_msg  "  --->  could not be start $DESC" "$INIT_SCRIPT_NAME_NOEXT"; return 2; }

	[ "$VERBOSE" != no ] && log_daemon_msg  "  --->  started $DESC" "$INIT_SCRIPT_NAME_NOEXT"

	return 0
}

#
# Function that stops the daemon/service
#
do_stop() {
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	su poker-terminator -c "$DAEMON_BASEPATH/stop_server SYSLOG 1 2>&1" | grep -e "error.*${APP_SCRIPT_NAME}" -q
	RETVAL="$?"

	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE

	[ "$VERBOSE" != no ] && [ "$RETVAL" = 0 ] && log_daemon_msg "  --->  $DESC not running" "$INIT_SCRIPT_NAME_NOEXT"
	[ "$VERBOSE" != no -a "$RETVAL" = 1 ] && log_daemon_msg "  --->  $DESC stopped" "$INIT_SCRIPT_NAME_NOEXT"
	return "$RETVAL"
}


case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$INIT_SCRIPT_NAME_NOEXT"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$INIT_SCRIPT_NAME_NOEXT"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$INIT_SCRIPT_NAME_NOEXT"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  status)
    status_of_proc -p $PIDFILE "$DAEMON" "$INIT_SCRIPT_NAME_NOEXT" && exit 0 || exit $?
  ;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

exit 0
